{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","Reducers/task-reducer.ts","Reducers/todolists-reducer.ts","AppWithRedux.tsx","Reducers/store.ts","index.tsx"],"names":["AddItemForm","memo","props","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","error","setError","addItem","trimmedTitle","trim","React","createElement","TextField","size","variant","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","onClick","AddCircleOutlineIcon","style","color","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","_ref","task","changeTaskTitle","changeTaskStatus","removeTask","console","log","ListItem","padding","id","className","isDone","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","name","checked","taskId","changeTaskTitleHnd","HighlightOffIcon","TodoList","addTask","useCallback","todoListId","tasksForTodolist","tasks","filter","t","removeTaskHandler","status","changeStatus","tasksItems","length","map","onAllClickHandler","changeFilter","onActiveClickHandler","onCompleteClickHandler","changeToDoListTitle","removeTodoList","List","ButtonGroup","disableElevation","ButtonExample","onClickHandler","active","Button","initialState","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todolistId","type","removeTaskAC","payload","addTaskAC","changeTaskStatusAC","changeTaskTitleAC","changeToDoListFilter","ChangeTodoListFilterAC","ChangeTodoListTitleAC","addTodoList","v1","AddTodoListAC","getTasksRorToDoList","todolist","todoListsComponents","tl","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","arguments","undefined","action","_objectSpread","_defineProperty","concat","_toConsumableArray","copyState","store","createStore","window","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9a9b029d.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport {IconButton, TextField} from \"@material-ui/core\";\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n}\nexport const AddItemForm = memo((props: AddItemFormType) => {\n\n    const [title, setTitle] = useState<string>(' ')\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        if (error) setError(false)\n        setTitle(e.currentTarget.value)\n    }\n    const [error, setError] = useState<boolean>()\n\n    const userMessage =\n        error\n            ? <div style={{color: 'hotpink'}}>Title is required!</div>\n            : <div>Please, create list item!</div>\n\n    const onKeyDownAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') addItem()\n    }\n    const addItem = () => {\n        const trimmedTitle = title.trim()\n\n        if (trimmedTitle) {\n            props.addItem(trimmedTitle)\n        } else {\n            setError(true)\n        }\n        setTitle('')\n    }\n\n    return (\n        <div>\n            <TextField\n                size={'small'}\n                variant={'standard'}\n                value={title}\n                onChange={changeTitle}\n                onKeyDown={onKeyDownAddTask}\n                error={error}\n                label={'Title'}\n                helperText={error && 'Title is required!'}\n            />\n            <IconButton onClick={addItem}>\n                <AddCircleOutlineIcon style={{color: 'hotpink'}}/>\n            </IconButton>\n            {/*{userMessage}*/}\n        </div>\n    );\n});\n\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanType = {\n    title: string\n    changeTitle: (title: string) => void\n}\n\nconst EditableSpan = (props: EditableSpanType) => {\n\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        props.changeTitle(title)\n        setEditMode(false)\n    }\n\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const enterChangeTitle = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') offEditMode()\n    }\n\n    return (\n        editMode\n            ? <TextField\n                variant={'standard'}\n                value={title}\n                autoFocus\n                onBlur={offEditMode}\n                onChange={changeTitle}\n                onKeyDown={enterChangeTitle}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    );\n};\n\nexport default EditableSpan;","import React, {ChangeEvent, memo} from 'react';\nimport {Checkbox, FormControlLabel, IconButton, ListItem} from \"@material-ui/core\";\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\nimport EditableSpan from \"./EditableSpan\";\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\nimport {TaskType} from \"./TodoList\";\n\nexport type TaskPropsType = {\n    task: TaskType\n    removeTask: (taskID: string) => void\n    changeTaskStatus: (taskID: string, isDone: boolean) => void\n    changeTaskTitle: (taskId: string, title: string) => void\n}\n\nexport const Task = memo(({task, changeTaskTitle, changeTaskStatus, removeTask}: TaskPropsType) => {\n    console.log('task')\n    const changeTaskTitleHnd = (title: string, taskId: string) => {\n        changeTaskTitle(taskId, title)\n    }\n\n    const removeTaskHandler = () => removeTask(task.id)\n\n    const onTitleChangeHandler = (title: string) => changeTaskTitleHnd(title, task.id)\n\n    const onStatusChangeHandler = (e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked)\n\n\n    return (\n        <ListItem style={{padding: 0}} key={task.id} className={task.isDone ? \"isDone\" : \"\"}>\n            <FormControlLabel control={<Checkbox icon={<FavoriteBorder/>} checkedIcon={<Favorite/>} name=\"checkedH\"\n                                                 checked={task.isDone} onChange={onStatusChangeHandler}/>} label=\"\"\n            />\n            <EditableSpan title={task.title} changeTitle={onTitleChangeHandler}/>\n            <IconButton style={{color: 'primary'}} onClick={removeTaskHandler}>\n                <HighlightOffIcon/>\n            </IconButton>\n        </ListItem>\n    );\n});\n\n","import React, {ChangeEvent, KeyboardEvent, memo, useCallback, useState} from 'react';\nimport {FilterValueType} from \"./App\";\nimport AddItemForm from \"./AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Button, ButtonGroup, Checkbox, FormControlLabel, IconButton, List, ListItem} from \"@material-ui/core\";\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport {Favorite, FavoriteBorder} from \"@material-ui/icons\";\nimport {Task} from \"./Task\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype TodoListPropsType = {\n    todoListId: string\n    title: string\n    tasks: Array<TaskType>\n    filter: FilterValueType\n    removeTask: (taskID: string, todoListId: string) => void\n    changeFilter: (filter: FilterValueType, todoListId: string) => void\n    addTask: (title: string, todoListId: string) => void\n    changeStatus: (taskID: string, isDone: boolean, todoListId: string) => void\n    removeTodoList: (todoListId: string) => void\n    changeTaskTitle: (taskId: string, title: string, todoListId: string) => void\n    changeToDoListTitle: (title: string, todoListId: string) => void\n}\n\n\nconst TodoList = memo((props: TodoListPropsType) => {\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todoListId)\n    }, [props.addTask, props.todoListId])\n\n    // const handlerCreator = (filter: FilterValueType, todoListId: string) => {\n    //     return () => props.changeFilter(filter, todoListId)\n    // }\n\n    const removeTodolist = () => props.removeTodoList(props.todoListId)\n\n    const changeTodoListTitle = (title: string) => {\n        props.changeToDoListTitle(title, props.todoListId)\n    }\n\n    let tasksForTodolist = props.tasks;\n///////////////////////////\n    if (props.filter === 'active') {\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === false)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = tasksForTodolist.filter(t => t.isDone === true)\n    }\n/////////////////////////////////////\n    const changeTaskTitle = useCallback((title: string, taskId: string) => {\n        props.changeTaskTitle(taskId, title, props.todoListId)\n    }, [props.changeTaskTitle, props.todoListId])\n    const removeTaskHandler = useCallback((taskId: string) => props.removeTask(taskId, props.todoListId), [props.removeTask, props.todoListId])\n    const changeTaskStatus = useCallback((taskId: string, status: boolean) => props.changeStatus(taskId, status, props.todoListId), [props.changeStatus, props.todoListId])\n\n\n    const tasksItems = props.tasks.length ? tasksForTodolist.map(task => <Task key={task.id}\n                                                                               changeTaskStatus={changeTaskStatus}\n                                                                               task={task}\n                                                                               removeTask={removeTaskHandler}\n                                                                               changeTaskTitle={changeTaskTitle}/>) :\n        <span>Tasks list is empty</span>\n//////////////////////////////\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todoListId), [props.changeFilter, props.todoListId])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todoListId), [props.changeFilter, props.todoListId])\n    const onCompleteClickHandler = useCallback(() => props.changeFilter('completed', props.todoListId), [props.changeFilter, props.todoListId])\n\n    return (\n        <div>\n            <h3>\n                {/*{props.title}*/}\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n                <IconButton color='primary'\n                            onClick={removeTodolist}><HighlightOffIcon/></IconButton>\n            </h3>\n            <AddItemForm addItem={addTask}/>\n            <List>\n                {tasksItems}\n            </List>\n            <ButtonGroup variant='contained' size='small' disableElevation>\n                <ButtonExample\n                    filter='all'\n                    color={'inherit'}\n                    // className={props.filter === 'all' ? 'btn-active btn' : 'btn'}\n                    onClickHandler={onAllClickHandler}\n                    active={props.filter}\n                />\n                <ButtonExample\n                    filter='active'\n                    //className={props.filter === 'active' ? 'btn-active btn' : 'btn'}\n                    onClickHandler={onActiveClickHandler}\n                    color={'primary'}\n                    active={props.filter}\n                />\n                <ButtonExample\n                    filter='completed'\n                    //className={props.filter === 'completed' ? 'btn-active btn' : 'btn'}\n                    onClickHandler={onCompleteClickHandler}\n                    color={'secondary'}\n                    active={props.filter}\n                />\n            </ButtonGroup>\n        </div>\n    );\n});\n\n\ntype ButtonExamplePropsType = {\n    filter: FilterValueType\n    onClickHandler: () => void\n    color: 'inherit' | 'primary' | 'secondary'\n    active: string\n}\n\nconst ButtonExample = memo((props: ButtonExamplePropsType) => {\n    return <Button\n        variant={props.filter === props.active ? 'outlined' : 'text'}\n        color={props.color}\n        onClick={props.onClickHandler}>{props.filter}\n    </Button>\n})\n\nexport default TodoList;","import {FilterValueType, TasksStateType, TodoListType} from \"../App\";\nimport {v1} from \"uuid\";\nimport {TaskType} from \"../TodoList\";\nimport {AddTodoListAT, RemoveTodoListAT} from \"./todolists-reducer\";\n\ntype RemoveTaskAT = ReturnType<typeof removeTaskAC>\ntype AddTaskAT = ReturnType<typeof addTaskAC>\ntype ChangeTaskStatusAT = ReturnType<typeof changeTaskStatusAC>\ntype ChangeTaskTitleAT = ReturnType<typeof changeTaskTitleAC>\n\ntype ActionType = RemoveTaskAT | AddTaskAT | ChangeTaskStatusAT | ChangeTaskTitleAT | AddTodoListAT | RemoveTodoListAT\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\n            }\n\n        case \"ADD-TASK\":\n            return {\n                ...state,\n                [action.payload.todolistId]: [{\n                    id: v1(),\n                    title: action.payload.title,\n                    isDone: false\n                }, ...state[action.payload.todolistId]]\n            }\n        case \"CHANGE-TASK-STATUS\":\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {\n                    ...t, isDone: action.payload.isDone\n                } : t)\n            }\n        case \"CHANGE-TASK-TITLE\":\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(t => t.id === action.payload.taskId ? {\n                    ...t,\n                    title: action.payload.title\n                } : t)\n            }\n        case \"ADD-TODOLIST\":\n            return {\n                ...state,\n                [action.payload.todolistId]: []\n            }\n        case \"REMOVE-TODOLIST\":\n            let copyState = {...state}\n            delete copyState[action.todolistId]\n            return copyState\n\n        default:\n            return state\n    }\n}\n\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n    return {type: 'REMOVE-TASK', taskId, todolistId} as const\n}\n\nexport const addTaskAC = (title: string, todolistId: string) => {\n    return {type: 'ADD-TASK', payload: {title, todolistId}} as const\n}\n\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string) => {\n    return {type: 'CHANGE-TASK-STATUS', payload: {taskId, isDone, todolistId}} as const\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: 'CHANGE-TASK-TITLE', payload: {taskId, title, todolistId}} as const\n}\n//\n// export const ChangeTodoListTitleAC = (title: string, todoListId: string): ChangeToDoListTitleAT => ({\n//     type: 'CHANGE-TODOLIST-TITLE',\n//     title,\n//     todoListId\n// })","import {FilterValueType, TodoListType} from \"../App\";\nimport {v1} from \"uuid\";\n\n// /*export type RemoveTodoListAT = {\n//     type: 'REMOVE-TODOLIST'\n//     todolistId: string\n// }\n// export type AddTodoListAT = {\n//     type: 'ADD-TODOLIST'\n//     title: string\n//     todolistId: string\n// }\n// type ChangeToDoListFilterAT = {\n//     type: 'CHANGE-TODOLIST-FILTER'\n//     filter: FilterValueType\n//     todoListId: string\n// }\n// type ChangeToDoListTitleAT = {\n//     type: 'CHANGE-TODOLIST-TITLE'\n//     title: string\n//     todoListId: string\n// }*/\nexport type RemoveTodoListAT = ReturnType<typeof RemoveTodoListAC>\nexport type AddTodoListAT = ReturnType<typeof AddTodoListAC>\ntype ChangeToDoListFilterAT = ReturnType<typeof ChangeTodoListFilterAC>\ntype ChangeToDoListTitleAT = ReturnType<typeof ChangeTodoListTitleAC>\n\ntype ActionType = RemoveTodoListAT | AddTodoListAT | ChangeToDoListFilterAT | ChangeToDoListTitleAT\n\nconst initialState: Array<TodoListType> = []\n\nexport const todolistsReducer = (state = initialState, action: ActionType): Array<TodoListType> => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\":\n            return state.filter(tl => tl.id !== action.todolistId)\n        case \"ADD-TODOLIST\":\n            const newTodoListId: string = v1()\n            return [...state, {id: action.payload.todolistId, title: action.payload.title, filter: 'all'}]\n\n        case \"CHANGE-TODOLIST-FILTER\":\n            return state.map(tl => tl.id === action.payload.todoListId ? {\n                ...tl,\n                filter: action.payload.filter\n            } : tl)\n\n        case \"CHANGE-TODOLIST-TITLE\":\n            return state.map(tl => tl.id === action.payload.todoListId ? {...tl, title: action.payload.title} : tl)\n\n        default:\n            return state\n    }\n}\n\n\nexport const RemoveTodoListAC = (id: string) => {\n    return {\n        type: \"REMOVE-TODOLIST\",\n        todolistId: id\n    } as const\n}\n\nexport const AddTodoListAC = (title: string) => {\n    return {\n        type: 'ADD-TODOLIST',\n        payload: {todolistId: v1(), title}\n    } as const\n}\n\nexport const ChangeTodoListFilterAC = (filter: FilterValueType, todoListId: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-FILTER',\n        payload: {\n            filter,\n            todoListId\n        }\n    } as const\n}\n\nexport const ChangeTodoListTitleAC = (title: string, todoListId: string) => {\n    return {\n        type: 'CHANGE-TODOLIST-TITLE',\n        payload: {\n            title,\n            todoListId\n        }\n    } as const\n}","import React, {useCallback, useEffect, useMemo, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./Reducers/task-reducer\";\r\nimport {\r\n    AddTodoListAC,\r\n    ChangeTodoListFilterAC,\r\n    ChangeTodoListTitleAC, RemoveTodoListAC,\r\n    todolistsReducer\r\n} from \"./Reducers/todolists-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./Reducers/store\";\r\n\r\n//CLI\r\n//GUI => CreateReadUpdateD\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [todoListId: string]: TaskType[]\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n//task CRUD\r\n    const removeTask = useCallback((taskId: string, todoListId: string) => {\r\n        dispatch(removeTaskAC(taskId, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListId: string) => {\r\n        dispatch(addTaskAC(title, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, isDone: boolean, todoListId: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, title: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n    }, [dispatch])\r\n\r\n//todoLists CRUD\r\n    const changeToDoListFilter = useCallback((filter: FilterValueType, todoListId: string) => {\r\n        dispatch(ChangeTodoListFilterAC(filter, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeToDoListTitle = useCallback((title: string, todoListId: string) => {\r\n        dispatch(ChangeTodoListTitleAC(title, todoListId))\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(AddTodoListAC(title))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListId: string) => {\r\n        dispatch(RemoveTodoListAC(todoListId))\r\n    }, [dispatch])\r\n\r\n    //UI:\r\n    const getTasksRorToDoList = (todolist: TodoListType) => {\r\n        switch (todolist.filter) {\r\n            case \"active\":\r\n                return tasks[todolist.id].filter(t => !t.isDone)\r\n            case \"completed\":\r\n                return tasks[todolist.id].filter(t => t.isDone)\r\n            default:\r\n                return tasks[todolist.id]\r\n        }\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        const tasks = getTasksRorToDoList(tl)\r\n        return <Grid item key={tl.id}>\r\n            <Paper elevation={8} style={{padding: '20px'}}>\r\n                <TodoList\r\n                    title={tl.title}\r\n                    tasks={tasks || []}\r\n                    removeTask={removeTask}\r\n                    changeFilter={changeToDoListFilter}\r\n                    addTask={addTask}\r\n                    changeStatus={changeTaskStatus}\r\n                    filter={tl.filter}\r\n                    todoListId={tl.id}\r\n                    key={tl.id}\r\n                    removeTodoList={removeTodoList}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeToDoListTitle={changeToDoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './task-reducer'\nimport {todolistsReducer} from './todolists-reducer'\nimport {combineReducers, legacy_createStore as createStore} from 'redux'\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer)\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducer from \"./AppWithReducer\";\r\nimport {Provider} from \"react-redux\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {store} from \"./Reducers/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}